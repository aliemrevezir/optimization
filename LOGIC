# Sets Management Application Logic

## Project Structure
```
project_root/
├── config/                     # Configuration files
│   └── database.js            # PostgreSQL configuration
├── public/                    # Static files
│   ├── components/            # Reusable UI components
│   │   └── navbar.html       # Navigation bar component
│   ├── css/                  # Stylesheets
│   │   ├── common.css        # Shared styles
│   │   ├── navbar.css        # Navigation styles
│   │   ├── homePage.css      # Homepage specific styles
│   │   └── sets.css          # Sets page specific styles
│   ├── js/
│   │   └── scripts.js        # Frontend JavaScript
│   ├── index.html            # Homepage
│   └── sets.html             # Sets management page
├── src/                      # Source code
│   ├── controllers/          # Business logic
│   │   └── setsController.js # Sets CRUD operations
│   ├── routes/               # API routes
│   │   └── sets.js          # Sets endpoints
│   └── server.js            # Main application file
└── tests/                    # Test files
    └── sets.test.js         # Sets tests
```

## CSS Organization

### 1. Common Styles (common.css)
- Base reset
- Typography
- Layout utilities
- Button base styles
- Color variables
- Shared components

### 2. Navigation Styles (navbar.css)
- Navbar layout
- Brand styling
- Navigation links
- Active states
- Responsive behavior

### 3. Homepage Styles (homePage.css)
- Component grid
- Cards layout
- Icons and images
- Animations
- Page-specific elements

### 4. Sets Page Styles (sets.css)
- Form styling
- Set cards
- Delete buttons
- Confirmation dialogs
- Notifications

## Database Schema
```sql
CREATE TABLE sets (
    id SERIAL PRIMARY KEY,
    set_name VARCHAR(255) NOT NULL,
    description TEXT,
    items JSONB NOT NULL,
    length INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## API Endpoints

### GET /api/sets
- Fetches all sets
- Response format:
```json
{
    "success": true,
    "data": [
        {
            "id": 1,
            "set_name": "string",
            "description": "string",
            "items": ["item1", "item2"],
            "length": 2,
            "created_at": "timestamp",
            "updated_at": "timestamp"
        }
    ]
}
```

### POST /api/sets
- Creates a new set
- Request body:
```json
{
    "set_name": "required string",
    "description": "optional string",
    "items": ["required array"]
}
```
- Response: Created set object

### GET /api/sets/:id
- Fetches single set by ID
- Response: Single set object

### PUT /api/sets/:id
- Updates existing set
- Request body: Same as POST
- Response: Updated set object

### DELETE /api/sets/:id
- Deletes set by ID
- Response: Deleted set object

## Frontend Logic

### Components
1. **Navigation Bar**
   - Shared across pages
   - Active state handling
   - Dynamic loading
   - Responsive design

2. **Create Set Form**
   - Input validation
   - Dynamic feedback
   - Loading states
   - Success/Error handling

3. **Sets Display**
   - Grid layout
   - Delete functionality
   - Confirmation dialogs
   - Loading states

4. **Notifications**
   - Success/Error messages
   - Auto-dismiss
   - Animations
   - Position fixed

## Styling
- Minimal, clean design
- Responsive layouts
- Font Awesome icons
- Color scheme:
  - Primary: #3498db (Blue)
  - Secondary: #2ecc71 (Green)
  - Danger: #ef4444 (Red)
  - Text: #2c3e50 (Dark)
  - Background: #f8f9fa (Light)
- Interactive elements:
  - Hover effects
  - Loading states
  - Focus states
  - Transitions

## Error Handling
1. **Frontend**
   - Form validation
   - API error display
   - Loading states
   - User notifications

2. **Backend**
   - Input validation
   - Database error handling
   - Consistent error responses
   - HTTP status codes

## Data Flow
1. User fills form → 
2. Frontend validates → 
3. API request → 
4. Controller processes → 
5. Database operation → 
6. Response returned → 
7. UI updated → 
8. User notified 